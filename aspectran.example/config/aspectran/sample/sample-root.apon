aspectran: {
	settings: {
		transletNamePattern: /example/*
		transletInterfaceClass: com.aspectran.web.activity.WebTranslet
		transletImplementClass: com.aspectran.web.activity.WebTransletImpl
		useNamespaces: true
		nullableContentId: true
		nullableActionId: true
		beanProxyMode: cglib
	}
	typeAliases: {
		example1: com.aspectran.Example1 
		example2: com.aspectran.Example2
	}
	aspect: {
		id: defaultRequestRule
		joinpoint: {
			scope: request
			pointcut: {
				wildcard: /a/*.do
				target: [
					{
						translet: /a/a/a.do
						bean: com.aspectran.example.ExampleBean
						method: doAction
						exclude: [
							{
								translet: /a/a/a.do
								bean: com.aspectran.example.ExampleBean
								method: doAction
							}
						]
					}
				]
				simpleTrigger: {
					startDelay
					repleatInterval
					repeatCount
				}
				cronTrigger: * * 8 8
			}
		}
		settings: {
			characterEncoding: utf-8
			multipart.maxRequestSize: 10M
			multipart.temporaryFilePath: /d:/
		}
	}
	bean: {
		id: beanId
		class: org.quartz.impl.StdSchedulerFactory
		scope: singleton
		constructor: {
			simpleArguments: [
				arg1,
				arg2
			]
			arguments: [
				{
					type: properties
					value: {
						org.quartz.scheduler.instanceName: DefaultQuartzScheduler
						org.quartz.scheduler.rmi.export: false
						org.quartz.scheduler.rmi.proxy: false
						org.quartz.scheduler.wrapJobExecutionInUserTransaction: false
						org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
						org.quartz.threadPool.threadCount: 10
						org.quartz.threadPool.threadPriority: 5
						org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true
						org.quartz.jobStore.misfireThreshold: 60000
						org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore
					}
				}
			]
		}
		properties-simple: {
			method1: aaa
			method2: bbb
		}
		properties: [
			{
				type: map
				name: property1
				value: {
					type: java.lang.String
					value:
					reference: {
						bean: a.bean
					}
					tokenize: true
				}
				valueType: java.lang.String
				defaultValue: default value
				tokenize: true
			},
			{
				name: property2
				value(int): 123
			},
			{
				name: property2
				reference: {
					bean: a.bean
				}
			}
		]
	}
	tranlset: {
	}
	import: {
		file: file1.apon
	}
	import: {
		file: file2.apon
	}
}

	
	<aspect id="defaultRequestRule">
		<joinpoint scope="request"/>
		<settings>
			<setting name="characterEncoding" value="utf-8"/>
			<setting name="multipart.maxRequestSize" value="10M"/>
			<setting name="multipart.temporaryFilePath" value="/d:/"/>
			<setting name="multipart.allowedFileExtensions" value="gif;jpg;png"/>
			<setting name="multipart.deniedFileExtensions" value="php;jsp;sh;bat"/>
		</settings>
		<!-- 
		<before>
			<action id="xml" bean="common.action.a1" method="testXmlAction">
				<properties>
					<item name="variable1">error</item>
					<item name="variable2">0001</item>
				</properties>
			</action>
		</before>
		<after>
			<action id="xml" bean="common.action.a1" method="testXmlAction">
				<properties>
					<item name="variable1">error</item>
					<item name="variable2">0001</item>
				</properties>
			</action>
		</after>
		-->
	</aspect>
	
	<!-- defaultRequestRule을 apon 형식으로 표현 -->
	<apon for="aspect">
		id: defaultRequestRule
		joinpoint: {
			scope: request
		}
		settings: {
			characterEncoding: utf-8
			multipart.maxRequestSize: 10M
			multipart.temporaryFilePath: /d:/
		}
	</apon>
	
	<aspect id="frontRequestRule">
		<joinpoint scope="request">
			<pointcut>/front/*</pointcut>
		</joinpoint>
		<advice>
			<before>
				<action id="xml" bean="common.action.a1" method="testXmlAction" hidden="true">
					<properties>
						<item name="variable1">error</item>
						<item name="variable2">0001</item>
					</properties>
				</action>
			</before>
			<after>
				<action id="xml" bean="common.action.a1" method="testXmlAction" hidden="true">
					<properties>
						<item name="variable1">error</item>
						<item name="variable2">0001</item>
					</properties>
				</action>
			</after>
		</advice>
	</aspect>

	<bean id="jspViewDispatcher" class="com.aspectran.web.view.JspViewDispatcher" scope="singleton"/>

	<aspect id="defaultResponseRule">
		<joinpoint scope="response"/>
		<settings>
			<setting name="characterEncoding" value="utf-8"/>
			<setting name="defaultContentType" value="text/html"/>
			<setting name="viewDispatcher" value="jspViewDispatcher"/>
		</settings>
	</aspect>

	<aspect id="error">
		<joinpoint/>
		<advice>
			<exceptionRaized>
				<action id="xml" bean="common.action.a1" method="testXmlAction" hidden="true">
					<properties>
						<item name="variable1">error</item>
						<item name="variable2">0001</item>
					</properties>
				</action>
				<responseByContentType exceptionType="com.aspectran.test.web.LoginFailedException">
					<dispatch contentType="text/html">
						<template file="/WEB-INF/jsp/login.jsp"/>
					</dispatch>
					<transform contentType="text/json">
						<template>{}</template>
					</transform>
				</responseByContentType>
				<responseByContentType>
					<dispatch contentType="text/html">
						<template file="/WEB-INF/jsp/error.jsp"/>
					</dispatch>
					<!-- forward contentType="text/html" translet="error"/ -->
					<transform contentType="text/plain">
						<template>
							오류 발생!
							오류 발생!
						</template>
					</transform>
					<transform contentType="text/xml">
						<action id="xml" bean="common.action.a1" method="testXmlAction" hidden="true">
							<properties>
								<item name="variable1">error</item>
								<item name="variable2">0001</item>
							</properties>
						</action>
						<echo id="error3">
							<item name="code">0002</item>
							<item name="message">오류 발생!</item>
						</echo>
						<echo id="error1">
							<item type="map">
								<value name="code">0001</value>
								<value name="message">오류 발생!</value>
							</item>
						</echo>
						<echo id="error2">
							<item type="map">
								<value name="code">0002</value>
								<value name="message">오류 발생!</value>
							</item>
							<item type="map">
								<value name="code">0004</value>
								<value name="message">오류 발생!</value>
							</item>
						</echo>
					</transform>
				</responseByContentType>
				<defaultResponse>
					<redirect translet="error"/>
				</defaultResponse>
			</exceptionRaized>
		</advice>
	</aspect>

	<aspect id="bean1">
		<joinpoint>
			<pointcut>/front/*</pointcut>
		</joinpoint>
		<advice>
			<around>
				<action id="xml" bean="common.action.a1" method="testXmlAction" hidden="true">
					<properties>
						<item name="variable1">error</item>
						<item name="variable2">0001</item>
					</properties>
				</action>
			</around>
		</advice>
	</aspect>

	<!--
		before: access logging
		after: error logging 
	-->
	<aspect id="logging">
		<joinpoint>
			<pointcut>@front.action1</pointcut>
		</joinpoint>
		<advice>
			<before>
				<action id="xml" bean="common.action.a1" method="testXmlAction" hidden="true">
					<properties>
						<item name="variable1">error</item>
						<item name="variable2">0001</item>
					</properties>
				</action>
			</before>
			<after>
				<action id="xml" bean="common.action.a1" method="testXmlAction" hidden="true">
					<properties>
						<item name="variable1">error</item>
						<item name="variable2">0001</item>
					</properties>
				</action>
			</after>
		</advice>
	</aspect>

	<!--
		scheduler
	
	
  <property name="triggers">
   <list>
    <ref bean="SystemOutTestTrigger"/>
   </list>
  </property>
  <property name="quartzProperties">
   <props>
    <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
    <prop key="org.quartz.threadPool.threadCount">5</prop>
    <prop key="org.quartz.threadPool.threadPriority">4</prop>
    <prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</prop>
    <prop key="org.quartz.jobStore.misfireThreshold">600000</prop>
   </props>
  </property>
 </bean>
	-->
	<bean class="org.quartz.impl.StdSchedulerFactory" scope="singleton">
		<constructor>
			<arguments>
				<item type="properties">
					<value name="org.quartz.scheduler.instanceName">DefaultQuartzScheduler</value>
					<value name="org.quartz.scheduler.rmi.export">false</value>
					<value name="org.quartz.scheduler.rmi.proxy">false</value>
					<value name="org.quartz.scheduler.wrapJobExecutionInUserTransaction">false</value>
					<value name="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</value>
					<value name="org.quartz.threadPool.threadCount">10</value>
					<value name="org.quartz.threadPool.threadPriority">5</value>
					<value name="org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread">true</value>
					<value name="org.quartz.jobStore.misfireThreshold">60000</value>
					<value name="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</value>
				</item>
			</arguments>
		</constructor>
	</bean>
	
	<!-- bean을 apon 형식으로 표현 -->
	<apon for="bean">
		class: org.quartz.impl.StdSchedulerFactory
		scope: singleton
		constructor: {
			arguments(properties): {
				org.quartz.scheduler.instanceName: DefaultQuartzScheduler
				org.quartz.scheduler.rmi.export: false
				org.quartz.scheduler.rmi.proxy: false
				org.quartz.scheduler.wrapJobExecutionInUserTransaction: false
				org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
				org.quartz.threadPool.threadCount: 10
				org.quartz.threadPool.threadPriority: 5
				org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true
				org.quartz.jobStore.misfireThreshold: 60000
				org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore
			}
		}
	</apon>
	
	<aspect id="scheduler1" for="scheduler">
		<joinpoint>
			<pointcut type="simpleTrigger">
				startDelay: 500
				repleatInterval: 3000
				repeatCount: 10
			</pointcut>
		</joinpoint>
		<advice bean="schedulerFactory1">
			<job translet="/scheduler1/test1.job"/>
			<job translet="/scheduler1/test2.job"/>
		</advice>
	</aspect>
	<aspect id="scheduler2" for="scheduler">
		<joinpoint>
			<pointcut type="cronTrigger">* * 10 0</pointcut>
		</joinpoint>
		<advice bean="schedulerFactory1">
			<job translet="/scheduler1/test3.job"/>
			<job translet="/scheduler1/test4.job" disabled="true"/>
		</advice>
	</aspect>

	<!--
		Matching targets:
			request: reserved
			response: reserved
			bean: each time it is called
			translet: each time it is called
			action: each time it is called
		getAspectObject:
			a return object of <before> action.
	-->
	<aspect id="sqlmap">
		<joinpoint scope="content">
			<pointcut>
				+(/front/a/*)
				-(/front/a/A*)
			</pointcut>
		</joinpoint>
		<advice bean="com.aspectran.support.orm.ibatis.SqlMapClientTransactionAdvice">
			<before>
				<action method="begin"/>
			</before>
			<finally>
				<action method="commit"/>
			</finally>
		</advice>
	</aspect>
	
	<bean id="a.*" class="com.**.*Aspectran*" scope="singleton"/>
	<bean id="b.*" class="com.aspectran.test.**.Sample*Test*Bean" scope="singleton"/>

	<import resource="aspectran/translets/sample.xml"/>
	
</aspectran>