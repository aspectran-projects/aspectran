aspectran: {
	setting: {
		transletNamePattern: /example/*
		transletInterfaceClass: com.aspectran.web.activity.WebTranslet
		transletImplementClass: com.aspectran.web.activity.WebTransletImpl
		useNamespaces: true
		nullableContentId: true
		nullableActionId: true
		beanProxyMode: cglib
	}
	typeAlias: {
		example1: com.aspectran.Example1 
		example2: com.aspectran.Example2
	}
	aspect: {
		id: defaultRequestRule
		useFor: scheduler
		joinpoint: {
			scope: request
			pointcut: {
				target: {
					+: /front/a/*@bean^method
					+: /front/b/*
					+: /front/c/*
					-: /front/a/A*
					+: [
						/front/a/*@bean^method
						/front/b/*
						/front/c/*
						/front/a/A*
					]
					-: [
						/front/a/A*
					]
				}
				target: {
					/front/a/*@bean^method
					/front/a/*@bean^method
					exclude: {
						/front/a/*@bean^method
						/front/a/*@bean^method
					}
				}
				target: {
					translet: aaa
					bean: bbb
					method: ccc
					exclude: {
						translet: aaa
						bean: bbb
						method: ccc
					}
				}
				simpleTrigger: {
					startDelay: 500
					repleatInterval: 3000
					repeatCount: 10
				}
				cronTrigger: {
					expression: * * 8 8
				}
			}
		}
		setting: {
			characterEncoding: utf-8
			multipart.maxRequestSize: 10M
			multipart.temporaryFilePath: /d:/
			multipart.allowedFileExtensions: gif;jpg;png
			multipart.deniedFileExtensions: php;jsp;sh;bat
		}
		advice: {
			before: {
				action: {
					id: action1
					bean: common.action.a1
					method: testXmlAction
					argument: [
						{
							type: properties
							value: {
								org.quartz.scheduler.instanceName: DefaultQuartzScheduler
								org.quartz.scheduler.rmi.export: false
								org.quartz.scheduler.rmi.proxy: false
								org.quartz.scheduler.wrapJobExecutionInUserTransaction: false
								org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
								org.quartz.threadPool.threadCount: 10
								org.quartz.threadPool.threadPriority: 5
								org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true
								org.quartz.jobStore.misfireThreshold: 60000
								org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore
							}
						}
					]
					property: [
						{
							type: map
							name: property1
							value: {
								code1: value1
								code2: value2
							}
							valueType: java.lang.String
							defaultValue: default value
							tokenize: true
						}
						{
							name: property2
							value(int): 123
						}
						{
							name: property2
							reference: {
								bean: a.bean
							}
						}
					]
					hidden: false
				}
				{
					id: include1
					include: /common/action/a1
					hidden: true
				}
				{
					id: echo1
					echo: {
						map1(string): {
							kind1(int): 001
							kind2: 002
							kind3: 003
						}
						list1(int): [
							1
							2
							3
						]
						text(string): [
							element1
							element2
							element3
						]
						message: error 001
					}
					hidden: false
				}
			}
			after: {
			}
			around: {
			}
			finally: {
			}
			exceptionRaized: {
				action: [
				]
				responseByContentType: {
					exceptionType: com.aspectran.test.web.LoginFailedException
					dispatch: {
						contentType: text/html
						template: {
							file: /WEB-INF/jsp/login.jsp
						}
					}
					transform: {
						contentType: text/json
						template: [
							line1
							line2
						]
					}
				}
				responseByContentType: {
					dispatch: {
						contentType: text/html
						template: {
							file: /WEB-INF/jsp/login.jsp
						}
					}
					transform: {
						contentType: text/json
						template: [
							line1
							line2
						]
					}
				}
			}
			bean: abc.bean
			job: [
				{
					tranlset: /scheduler1/test1.job
					disabled: false;
				},
				{
					tranlset: /scheduler1/test2.job
					disabled: true;
				}
			]
		}
	}
	bean: {
		id: beanId
		class: org.quartz.impl.StdSchedulerFactory
		scope: singleton
		constructor: {
			argument: [
				{
					type: properties
					value: {
						org.quartz.scheduler.instanceName: DefaultQuartzScheduler
						org.quartz.scheduler.rmi.export: false
						org.quartz.scheduler.rmi.proxy: false
						org.quartz.scheduler.wrapJobExecutionInUserTransaction: false
						org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
						org.quartz.threadPool.threadCount: 10
						org.quartz.threadPool.threadPriority: 5
						org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true
						org.quartz.jobStore.misfireThreshold: 60000
						org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore
					}
				}
			]
		}
		property: [
			{
				type: map
				name: property1
				value: {
					code1: value1
					code2: value2
				}
				valueType: java.lang.String
				defaultValue: default value
				tokenize: true
			}
			{
				name: property2
				value(int): 123
			}
			{
				name: property2
				reference: {
					bean: a.bean
				}
			}
		]
		property(properties): {
			map1(string): {
				kind1(int): 001
				kind2: 002
				kind3: 003
			}
			list1(int): [
				1
				2
				3
			]
			text(string): [
				element1
				element2
				element3
			]
			message: error 001
		}
	}
	tranlset: {
		name: /example/hello
		request: {
			method: get
			characterEncoding: utf-8
			attribute: [
				{
					type: map
					name: property1
					value: {
						code1: value1
						code2: value2
					}
					valueType: java.lang.String
					defaultValue: default value
					tokenize: true
				}
				{
					name: property2
					value(int): 123
				}
				{
					name: property2
					reference: {
						bean: a.bean
					}
				}
			]
			multipart: {
				attribute: true
				fileItem: [
					name1[]
					name2[]
					name3[]
				]
			}
		}
		contents: {
			name: contentsName
			content: [
			]
		}
		content: [
			{
				id: content1
				hidden: false;
				action: [
					{
						id: action1
						bean: common.action.a1
						method: testXmlAction
						argument: [
							{
								type: properties
								value: {
									org.quartz.scheduler.instanceName: DefaultQuartzScheduler
									org.quartz.scheduler.rmi.export: false
									org.quartz.scheduler.rmi.proxy: false
									org.quartz.scheduler.wrapJobExecutionInUserTransaction: false
									org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
									org.quartz.threadPool.threadCount: 10
									org.quartz.threadPool.threadPriority: 5
									org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true
									org.quartz.jobStore.misfireThreshold: 60000
									org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore
								}
							}
						]
						property: {
							map1(string): {
								kind1(int): 001
								kind2: 002
								kind3: 003
							}
							list1(int): [
								1
								2
								3
							]
							text(string): [
								element1
								element2
								element3
							]
							message: error 001
						}
						hidden: false
					}
					{
						id: include1
						include: /common/action/a1
						hidden: true
					}
					{
						id: echo1
						echo: {
							map1(string): {
								kind1(int): 001
								kind2: 002
								kind3: 003
							}
							list1(int): [
								1
								2
								3
							]
							text(string): [
								element1
								element2
								element3
							]
							message: error 001
						}
						hidden: false
					}
				]
			}
		]
		response: {
			name: .xml
			characterEncoding: utf-8
			dispatch: {
				contentType: text/html
				template: {
					file: /WEB-INF/jsp/login.jsp
				}
			}
			transform: {
				contentType: text/json
				template: [
					line1
					line2
				]
			}
		}
		response: {
			name: .json
			characterEncoding: utf-8
			dispatch: {
				contentType: text/html
				template: {
					file: /WEB-INF/jsp/login.jsp
				}
			}
			transform: {
				contentType: text/json
				template: [
					line1
					line2
				]
			}
		}
		exception: {
			responseByContentType: {
				exceptionType: com.aspectran.test.web.LoginFailedException
				dispatch: {
					contentType: text/html
					template: {
						file: /WEB-INF/jsp/login.jsp
					}
				}
				transform: {
					contentType: text/json
					template: [
						line1
						line2
					]
				}
			}
			defaultResponse: {
				dispatch: {
					contentType: text/html
					template: {
						file: /WEB-INF/jsp/login.jsp
					}
				}
				transform: {
					contentType: text/json
					template: [
						line1
						line2
					]
				}
			}
		}
	}
	import: {
		file: file1.apon
	}
	import: {
		file: file2.apon
	}
}

	
	<aspect id="defaultRequestRule">
		<joinpoint scope="request"/>
		<settings>
			<setting name="characterEncoding" value="utf-8"/>
			<setting name="multipart.maxRequestSize" value="10M"/>
			<setting name="multipart.temporaryFilePath" value="/d:/"/>
			<setting name="multipart.allowedFileExtensions" value="gif;jpg;png"/>
			<setting name="multipart.deniedFileExtensions" value="php;jsp;sh;bat"/>
		</settings>
		<!-- 
		<before>
			<action id="xml" bean="common.action.a1" method="testXmlAction">
				<properties>
					<item name="variable1">error</item>
					<item name="variable2">0001</item>
				</properties>
			</action>
		</before>
		<after>
			<action id="xml" bean="common.action.a1" method="testXmlAction">
				<properties>
					<item name="variable1">error</item>
					<item name="variable2">0001</item>
				</properties>
			</action>
		</after>
		-->
	</aspect>
	
	<!-- defaultRequestRule을 apon 형식으로 표현 -->
	<apon for="aspect">
		id: defaultRequestRule
		joinpoint: {
			scope: request
		}
		settings: {
			characterEncoding: utf-8
			multipart.maxRequestSize: 10M
			multipart.temporaryFilePath: /d:/
		}
	</apon>
	
	<aspect id="frontRequestRule">
		<joinpoint scope="request">
			<pointcut>/front/*</pointcut>
		</joinpoint>
		<advice>
			<before>
				<action id="xml" bean="common.action.a1" method="testXmlAction" hidden="true">
					<properties>
						<item name="variable1">error</item>
						<item name="variable2">0001</item>
					</properties>
				</action>
			</before>
			<after>
				<action id="xml" bean="common.action.a1" method="testXmlAction" hidden="true">
					<properties>
						<item name="variable1">error</item>
						<item name="variable2">0001</item>
					</properties>
				</action>
			</after>
		</advice>
	</aspect>

	<bean id="jspViewDispatcher" class="com.aspectran.web.view.JspViewDispatcher" scope="singleton"/>

	<aspect id="defaultResponseRule">
		<joinpoint scope="response"/>
		<settings>
			<setting name="characterEncoding" value="utf-8"/>
			<setting name="defaultContentType" value="text/html"/>
			<setting name="viewDispatcher" value="jspViewDispatcher"/>
		</settings>
		<settings>
			characterEncoding: utf-8
			defaultContentType: text/html
			viewDispatcher: jspViewDispatcher
		</settings>
	</aspect>

	<aspect id="error">
		<joinpoint/>
		<advice>
			<exceptionRaized>
				<action id="xml" bean="common.action.a1" method="testXmlAction" hidden="true">
					<properties>
						<item name="variable1">error</item>
						<item name="variable2">0001</item>
					</properties>
				</action>
				<responseByContentType exceptionType="com.aspectran.test.web.LoginFailedException">
					<dispatch contentType="text/html">
						<template file="/WEB-INF/jsp/login.jsp"/>
					</dispatch>
					<transform contentType="text/json" default="true">
						<template>{}</template>
					</transform>
				</responseByContentType>
				<responseByContentType>
					<dispatch contentType="text/html">
						<template file="/WEB-INF/jsp/error.jsp"/>
					</dispatch>
					<!-- forward contentType="text/html" translet="error"/ -->
					<transform contentType="text/plain">
						<template>
							오류 발생!
							오류 발생!
						</template>
					</transform>
					<transform contentType="text/xml">
						<action id="xml" bean="common.action.a1" method="testXmlAction" hidden="true">
							<properties>
								<item name="variable1">error</item>
								<item name="variable2">0001</item>
							</properties>
							<properties>
								code: 001
								message: error 001
							</properties>
							<properties>
								map1(string): {
									kind1(int): 001
									kind2: 002
									kind3: 003
								}
								list1(int): [
									1
									2
									3
								]
								text(string): [
									element1
									element2
									element3
								]
									
								message: error 001
							</properties>
							property: [
								code: {
									type:
								}
							]
							property: [
								{
									name: code
									value: 001
								},
								{
									name: message
									value: error 001
								}
							]
							property: {
								name: message
								value: error 001
							}
							property: {
								type: map
								name: property1
								value: {
									value:
									reference: {
										bean: a.bean
									}
									tokenize: true
								}
								valueType: java.lang.String
								defaultValue: default value
								tokenize: true
							}
						</action>
						<echo id="error3">
							<item name="code">0002</item>
							<item name="message">오류 발생!</item>
						</echo>
						<echo id="error1">
							<item type="map">
								<value name="code">0001</value>
								<value name="message">오류 발생!</value>
							</item>
						</echo>
						<echo id="error2">
							<item type="map">
								<value name="code">0002</value>
								<value name="message">오류 발생!</value>
							</item>
							<item type="map">
								<value name="code">0004</value>
								<value name="message">오류 발생!</value>
							</item>
						</echo>
					</transform>
				</responseByContentType>
				<defaultResponse>
					<redirect translet="error"/>
				</defaultResponse>
			</exceptionRaized>
		</advice>
	</aspect>

	<aspect id="bean1">
		<joinpoint>
			<pointcut>/front/*</pointcut>
		</joinpoint>
		<advice>
			<around>
				<action id="xml" bean="common.action.a1" method="testXmlAction" hidden="true">
					<properties>
						<item name="variable1">error</item>
						<item name="variable2">0001</item>
					</properties>
				</action>
			</around>
		</advice>
	</aspect>

	<!--
		before: access logging
		after: error logging 
	-->
	<aspect id="logging">
		<joinpoint>
			<pointcut>@front.action1</pointcut>
		</joinpoint>
		<advice>
			<before>
				<action id="xml" bean="common.action.a1" method="testXmlAction" hidden="true">
					<items for="property">
						<item name="variable1">error</item>
						<item name="variable2">0001</item>
					</items>
					<items for="argument">
						<item name="variable1">error</item>
						<item name="variable2">0001</item>
					</items>
					<property>
						<item name="variable1">error</item>
						<item name="variable2">0001</item>
					</property>
					<argument>
						<item name="variable1">error</item>
						<item name="variable2">0001</item>
					</argument>
				</action>
			</before>
			<after>
				<action id="xml" bean="common.action.a1" method="testXmlAction" hidden="true">
					<properties>
						<item name="variable1">error</item>
						<item name="variable2">0001</item>
					</properties>
				</action>
			</after>
		</advice>
	</aspect>

	<!--
		scheduler
	
	
  <property name="triggers">
   <list>
    <ref bean="SystemOutTestTrigger"/>
   </list>
  </property>
  <property name="quartzProperties">
   <props>
    <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
    <prop key="org.quartz.threadPool.threadCount">5</prop>
    <prop key="org.quartz.threadPool.threadPriority">4</prop>
    <prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</prop>
    <prop key="org.quartz.jobStore.misfireThreshold">600000</prop>
   </props>
  </property>
 </bean>
	-->
	<bean class="org.quartz.impl.StdSchedulerFactory" scope="singleton">
		<constructor>
			<arguments>
				<item type="properties">
					<value name="org.quartz.scheduler.instanceName">DefaultQuartzScheduler</value>
					<value name="org.quartz.scheduler.rmi.export">false</value>
					<value name="org.quartz.scheduler.rmi.proxy">false</value>
					<value name="org.quartz.scheduler.wrapJobExecutionInUserTransaction">false</value>
					<value name="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</value>
					<value name="org.quartz.threadPool.threadCount">10</value>
					<value name="org.quartz.threadPool.threadPriority">5</value>
					<value name="org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread">true</value>
					<value name="org.quartz.jobStore.misfireThreshold">60000</value>
					<value name="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</value>
				</item>
			</arguments>
		</constructor>
	</bean>
	
	<!-- bean을 apon 형식으로 표현 -->
	<apon for="bean">
		class: org.quartz.impl.StdSchedulerFactory
		scope: singleton
		constructor: {
			argument: [
				{
					type: properties
					value: {
						org.quartz.scheduler.instanceName: DefaultQuartzScheduler
						org.quartz.scheduler.rmi.export: false
						org.quartz.scheduler.rmi.proxy: false
						org.quartz.scheduler.wrapJobExecutionInUserTransaction: false
						org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
						org.quartz.threadPool.threadCount: 10
						org.quartz.threadPool.threadPriority: 5
						org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true
						org.quartz.jobStore.misfireThreshold: 60000
						org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore
					}
				}
			]
		}
	</apon>
	
	<aspect id="scheduler1" for="scheduler">
		<joinpoint scope="request">
			<pointcut>
				+(/front/a/*)
				-(/front/a/A*)
			</pointcut>
		</joinpoint>
		<joinpoint scope="request">
			<pointcut>
				target: {
					+: /front/a/*@bean^method
					+: /front/b/*
					+: /front/c/*
					-: /front/a/A*
					+: [
						/front/a/*@bean^method
						/front/b/*
						/front/c/*
						/front/a/A*
					]
					-: [
						/front/a/A*
					]
				}
				target: {
					translet: aaa
					bean: bbb
					method: ccc
					exclude: {
						translet: aaa
						bean: bbb
						method: ccc
					}
				}
			</pointcut>
		</joinpoint>
		<joinpoint>
			<pointcut>
				simpleTrigger: {
					startDelay: 500
					repleatInterval: 3000
					repeatCount: 10
				}
			</pointcut>
			<pointcut>
				cronTrigger: {
					expression: * * *
				}
			</pointcut>
		
			<pointcut type="simpleTrigger">
				startDelay: 500
				repleatInterval: 3000
				repeatCount: 10
			</pointcut>
		</joinpoint>
		<advice bean="schedulerFactory1">
			<job translet="/scheduler1/test1.job"/>
			<job translet="/scheduler1/test2.job"/>
		</advice>
	</aspect>
	<aspect id="scheduler2" for="scheduler">
		<joinpoint>
			<pointcut type="cronTrigger">* * 10 0</pointcut>
		</joinpoint>
		<advice bean="schedulerFactory1">
			<job translet="/scheduler1/test3.job"/>
			<job translet="/scheduler1/test4.job" disabled="true"/>
		</advice>
	</aspect>

	<!--
		Matching targets:
			request: reserved
			response: reserved
			bean: each time it is called
			translet: each time it is called
			action: each time it is called
		getAspectObject:
			a return object of <before> action.
	-->
	<aspect id="sqlmap">
		<joinpoint scope="content">
			<pointcut>
				+(/front/a/*)
				-(/front/a/A*)
			</pointcut>
		</joinpoint>
		<advice bean="com.aspectran.support.orm.ibatis.SqlMapClientTransactionAdvice">
			<before>
				<action method="begin"/>
			</before>
			<finally>
				<action method="commit"/>
			</finally>
		</advice>
	</aspect>
	
	<bean id="a.*" class="com.**.*Aspectran*" scope="singleton"/>
	<bean id="b.*" class="com.aspectran.test.**.Sample*Test*Bean" scope="singleton"/>

	<import resource="aspectran/translets/sample.xml"/>
	
</aspectran>