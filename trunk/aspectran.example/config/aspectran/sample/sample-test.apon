aspectran: {
	setting: {
		transletNamePattern: "/example/*"
		transletInterfaceClass: "com.aspectran.web.activity.WebTranslet"
		transletImplementClass: "com.aspectran.web.activity.WebTransletImpl"
		nullableContentId: "true"
		nullableActionId: "true"
		beanProxyMode: "cglib"
	}
	typeAlias: {
		example1: "com.aspectran.Example1 "
		example2: "com.aspectran.Example2"
	}
	aspect: {
		id: "defaultRequestRule"
		useFor: "scheduler"
		joinpoint: {
			scope: "request"
			pointcut: {
				type: "wildcard"
				target: {
					+: [
						"/front/a/*@bean^method"
						"/front/b/*"
						"/front/c/*"
						"/front/a/A*"
					]
					-: [
						"/front/a/A*"
					]
				}
				target: {
					+: "/front/a/*@bean^method"
					+: "/front/b/*"
					+: "/front/c/*"
					-: "/front/a/A*"
					-: "/front/a/A*"
				}
				target: {
					+: "/front/a/*@bean^method"
					+: "/front/a/*@bean^method"
					exclude: [
						"/front/a/*@bean^method"
						"/front/a/*@bean^method"
					]
				}
				target: {
					translet: "aaa"
					bean: "bbb"
					method: "ccc"
					exclude: {
						translet: "aaa"
						bean: "bbb"
						method: "ccc"
					}
				}
				simpleTrigger: {
					startDelay: 500
					repleatInterval: 3000
					repeatCount: 10
				}
				cronTrigger: {
					expression: "* * 8 8"
				}
			}
		}
		setting: {
			characterEncoding: "utf-8"
			multipart.maxRequestSize: "10M"
			multipart.temporaryFilePath: "/d:/"
			multipart.allowedFileExtensions: "gif;jpg;png"
			multipart.deniedFileExtensions: "php;jsp;sh;bat"
		}
		advice: {
			before: {
				action: {
					id: "action1"
					bean: "common.action.a1"
					method: "testXmlAction"
					argument: [
						{
							type: "properties"
							value: {
								org.quartz.scheduler.instanceName: "DefaultQuartzScheduler"
								org.quartz.scheduler.rmi.export: "false"
								org.quartz.scheduler.rmi.proxy: "false"
								org.quartz.scheduler.wrapJobExecutionInUserTransaction: "false"
								org.quartz.threadPool.class: "org.quartz.simpl.SimpleThreadPool"
								org.quartz.threadPool.threadCount: 10
								org.quartz.threadPool.threadPriority: 5
								org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: "true"
								org.quartz.jobStore.misfireThreshold: 60000
								org.quartz.jobStore.class: "org.quartz.simpl.RAMJobStore"
							}
						}
					]
					property: [
						{
							type: "map"
							name: "property1"
							value: {
								code1: "value1"
								code2: "value2"
							}
							valueType: "java.lang.String"
							defaultValue: "default value"
							tokenize: "true"
						}
						{
							name: "property2"
							value(int): 123
						}
						{
							name: "property2"
							reference: {
								bean: "a.bean"
							}
						}
					]
					hidden: "false"
				}
				action: {
					id: "include1"
					include: "/common/action/a1"
					hidden: "true"
				}
				action: {
					id: "echo1"
					echo: {
						map1(text): (
							|kind1(int): 001
							|kind2(float): 002
							|kind3(double): 003
						)
						list1(int): [
							1
							2
							3
						]
						text(string): [
							element1
							element2
							element3
						]
						message: "error 001"
					}
					hidden: "false"
				}
			}
			after: {
			}
			around: {
			}
			finally: {
			}
			exceptionRaized: {
				action: [
				]
				responseByContentType: {
					exceptionType: "com.aspectran.test.web.LoginFailedException"
					dispatch: {
						contentType: "text/html"
						template: {
							file: "/WEB-INF/jsp/login.jsp"
						}
					}
					transform: {
						contentType: "text/json"
						template(text): [
							(
								|동해물과 백두산이
								|마르고 닳도록
								|하느님이 보우하사
								|우리나라 만세
							)
							(
								|The semicolon or semi-colon
								|(;) is a punctuation mark that separates major sentence elements
								|A semicolon can be used between two closely related independent clauses,
							)
						]
						template: (
							|동해물과 백두산이
							|마르고 닳도록
							|하느님이 보우하사
							|우리나라 만세
						)
					}
				}
				responseByContentType: {
					dispatch: {
						contentType: "text/html"
						template: {
							file: "/WEB-INF/jsp/login.jsp"
						}
					}
					transform: {
						contentType: "text/json"
						template: (
							|line1
							|	line2
							|	line2-1
							|line1
							|	line2
							|	line2-1
						)
					}
				}
			}
			bean: "abc.bean"
			job: [
				{
					tranlset: "/scheduler1/test1.job"
					disabled: "false;"
				}
				{
					tranlset: "/scheduler1/test2.job"
					disabled: "true;"
				}
			]
		}
	}
	bean: {
		id: "beanId"
		class: "org.quartz.impl.StdSchedulerFactory"
		scope: "singleton"
		constructor: {
			argument: [
				{
					type: "properties"
					value: {
						org.quartz.scheduler.instanceName: "DefaultQuartzScheduler"
						org.quartz.scheduler.rmi.export: "false"
						org.quartz.scheduler.rmi.proxy: "false"
						org.quartz.scheduler.wrapJobExecutionInUserTransaction: "false"
						org.quartz.threadPool.class: "org.quartz.simpl.SimpleThreadPool"
						org.quartz.threadPool.threadCount: 10
						org.quartz.threadPool.threadPriority: 5
						org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: "true"
						org.quartz.jobStore.misfireThreshold: 60000
						org.quartz.jobStore.class: "org.quartz.simpl.RAMJobStore"
					}
				}
			]
		}
		property: [
			{
				type: "map"
				name: "property1"
				value: {
					code1: "value1"
					code2: "value2"
				}
				valueType: "java.lang.String"
				defaultValue: "default value"
				tokenize: "true"
			}
			{
				name: "property2"
				value(int): 123
			}
			{
				name: "property2"
				reference: "fdfdfd"
			}
		]
		property(properties): {
			map1: {
				kind1(int): 001
				kind2: 002
				kind3: 003
			}
			list1(int): [
				1
				2
				3
			]
			text(string): [
				element1
				element2
				element3
			]
			message: "error 001"
		}
	}
	tranlset: {
		name: "/example/hello"
		request: {
			method: "get"
			characterEncoding: "utf-8"
			attribute: [
				{
					type: "map"
					name: "property1"
					value: {
						code1: "value1"
						code2: "value2"
					}
					valueType: "java.lang.String"
					defaultValue: "default value"
					tokenize: "true"
				}
				{
					name: "property2"
					value(int): 123
				}
				{
					name: "property2"
					reference: {
						bean: "a.bean"
					}
				}
			]
			multipart: {
				attribute: "true"
				fileItem: [
					"name1[]"
					"name2[]"
					"name3[]"
				]
			}
		}
		contents: {
			name: "contentsName"
			content: [
			]
		}
		content: [
			{
				id: "content1"
				hidden: "false;"
				action: [
					{
						id: "action1"
						bean: "common.action.a1"
						method: "testXmlAction"
						argument: [
							{
								type: "properties"
								value: {
									org.quartz.scheduler.instanceName: "DefaultQuartzScheduler"
									org.quartz.scheduler.rmi.export: "false"
									org.quartz.scheduler.rmi.proxy: "false"
									org.quartz.scheduler.wrapJobExecutionInUserTransaction: "false"
									org.quartz.threadPool.class: "org.quartz.simpl.SimpleThreadPool"
									org.quartz.threadPool.threadCount: 10
									org.quartz.threadPool.threadPriority: 5
									org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: "true"
									org.quartz.jobStore.misfireThreshold: 60000
									org.quartz.jobStore.class: "org.quartz.simpl.RAMJobStore"
								}
							}
						]
						property: {
							map1: {
								kind1(int): 001
								kind2: 002
								kind3: 003
							}
							list1(int): [
								1
								2
								3
							]
							text(string): [
								element1
								element2
								element3
							]
							message: "error 001"
						}
						hidden: "false"
					}
					{
						id: "include1"
						include: "/common/action/a1"
						hidden: "true"
					}
					{
						id: "echo1"
						echo: {
							map1(parameter): {
								kind1(int): 001
								kind2: 002
								kind3: 003
							}
							list1(int): [
								1
								2
								3
							]
							text(string): [
								element1
								element2
								element3
							]
							message: "error 001"
						}
						hidden: "false"
					}
				]
			}
		]
		response: {
			name: ".xml"
			characterEncoding: "utf-8"
			dispatch: {
				contentType: "text/html"
				template: {
					file: "/WEB-INF/jsp/login.jsp"
				}
			}
			transform: {
				contentType: "text/json"
				template: [
					"line1"
					"line2"
				]
			}
		}
		response: {
			name: ".json"
			characterEncoding: "utf-8"
			dispatch: {
				contentType: "text/html"
				template: {
					file: "/WEB-INF/jsp/login.jsp"
				}
			}
			transform: {
				contentType: "text/json"
				template: [
					"line1"
					"line2"
				]
			}
		}
		exception: {
			responseByContentType: {
				exceptionType: "com.aspectran.test.web.LoginFailedException""
				dispatch: {
					contentType: "text/html"
					template: {
						file: "/WEB-INF/jsp/login.jsp"
					}
				}
				transform: {
					contentType: "text/json"
					template: [
						"line1"
						"line2"
					]
				}
			}
			defaultResponse: {
				dispatch: {
					contentType: "text/html"
					template: {
						file: "/WEB-INF/jsp/login.jsp"
					}
				}
				transform: {
					contentType: "text/json"
					template: [
						"line1"
						"line2"
					]
				}
			}
		}
	}
	import: {
		file: "f"ile1.\napon"
	}
	import: {
		file: "file2.apon"
	}
}