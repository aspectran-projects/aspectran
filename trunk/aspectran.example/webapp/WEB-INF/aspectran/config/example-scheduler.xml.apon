# C:\Users\Gulendol\Projects\aspectran\ADE\workspace\aspectran.example\webapp\WEB-INF\aspectran\config\example-scheduler.xml.apon
aspectran: {
	setting: {
		transletNamePattern: "/scheduler/*.job"
		transletNamePatternPrefix: "/scheduler/"
		transletNamePatternSuffix: ".job"
	}
	aspect: {
		id: "exception2"
		useFor: "translet"
		joinpoint: {
			scope: "translet"
			pointcut: {
				target: {
					+: "/scheduler/*"
				}
			}
		}
		advice: {
			exceptionRaized: {
				responseByContentType: {
					exceptionType: "java.lang.reflect.InvocationTargetException"
					transform: {
						type: "transform/xml"
						contentType: "text/xml"
						action: {
							echo: [
								{
									type: "map"
									value: {
										errorCode: "E0001"
										message: "error occured."
									}
								}
							]
						}
					}
				}
			}
		}
	}
	aspect: {
		id: "scheduler1"
		useFor: "scheduler"
		joinpoint: {
			scope: "translet"
			pointcut: {
				cronTrigger: {
					expression: "0/5 * * * * ?"
				}
			}
		}
		advice: {
			bean: "schedulerFactory"
			job: {
				translet: "hello"
				disabled: false
			}
			job: {
				translet: "countTo10"
				disabled: true
			}
			job: {
				translet: "countTo10.xml"
				disabled: true
			}
		}
	}
	aspect: {
		id: "scheduler2"
		useFor: "scheduler"
		joinpoint: {
			scope: "translet"
			pointcut: {
				cronTrigger: {
					expression: "0/5 * * * * ?"
				}
			}
		}
		advice: {
			bean: "schedulerFactory"
			job: {
				translet: "errorCaused"
				disabled: true
			}
		}
	}
	bean: {
		id: "schedulerFactory"
		class: "org.quartz.impl.StdSchedulerFactory"
		scope: "singleton"
		constructor: {
			argument: [
				{
					type: "properties"
					value: {
						org.quartz.scheduler.instanceName: "AspectranQuartzScheduler"
						org.quartz.scheduler.rmi.export: "false"
						org.quartz.scheduler.rmi.proxy: "false"
						org.quartz.scheduler.wrapJobExecutionInUserTransaction: "false"
						org.quartz.threadPool.class: "org.quartz.simpl.SimpleThreadPool"
						org.quartz.threadPool.threadCount: "10"
						org.quartz.threadPool.threadPriority: "5"
						org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: "true"
						org.quartz.jobStore.misfireThreshold: "60000"
						org.quartz.jobStore.class: "org.quartz.simpl.RAMJobStore"
					}
				}
			]
		}
	}
	bean: {
		id: "exampleJobAction"
		class: "com.aspectran.example.scheduler.ExampleJobAction"
		singleton: true
	}
	translet: {
		name: "hello"
		request: {
			attribute: [
				{
					name: "my_name_is"
					value: "aspectran"
				}
			]
		}
		transform: {
			type: "transform/text"
			contentType: "text/plain"
			template: {
				content: (
					|hello~ @{my_name_is}!!
				)
			}
		}
	}
	translet: {
		name: "countTo10"
		transform: {
			type: "transform/text"
			contentType: "text/plain"
			template: {
				content: (
					|@{result1}
				)
			}
			action: {
				id: "result1"
				beanId: "exampleJobAction"
				method: "countTo10"
			}
		}
	}
	translet: {
		name: "countTo10twice"
		action: {
			id: "result1"
			beanId: "exampleJobAction"
			method: "countTo10"
		}
		action: {
			id: "result2"
			beanId: "exampleJobAction"
			method: "countTo10"
		}
		transform: {
			type: "transform/text"
			contentType: "text/plain"
			template: {
				content: (
					|(first)
					|@{result1}
					|(second)
					|@{result2}
				)
			}
		}
	}
	translet: {
		name: "countTo10.xml"
		transform: {
			type: "transform/xml"
			contentType: "text/xml"
			action: {
				id: "result"
				beanId: "exampleJobAction"
				method: "countTo10AsArray"
			}
		}
	}
	translet: {
		name: "countTo10ext"
		response: {
			transform: {
				type: "transform/text"
				contentType: "text/plain"
				template: {
					content: (
						|@{result}
					)
				}
				action: {
					id: "result"
					beanId: "exampleJobAction"
					method: "countTo10"
				}
			}
		}
		response: {
			name: ".xml"
			transform: {
				type: "transform/xml"
				contentType: "text/xml"
				action: {
					beanId: "exampleJobAction"
					method: "countTo10AsArray"
				}
			}
		}
	}
	translet: {
		name: "errorCaused"
		content: {
			action: {
				id: "result"
				beanId: "exampleJobAction"
				method: "errorCaused"
			}
		}
		transform: {
			type: "transform/xml"
			contentType: "text/xml"
		}
	}
}
