<!DOCTYPE aspectran PUBLIC "-//ASPECTRAN//DTD Aspectran Configuration 2.0//EN"
                           "http://aspectran.github.io/dtd/aspectran-3.dtd">

<aspectran>
	
	<description>
		This is an Aspectran Configuration for Testing.
	</description>

	<settings>
		<setting name="defaultTemplateEngine" value="freemarker"/>
	</settings>

	<bean id="freemarkerConfigurationFactory" class="com.aspectran.core.context.template.engine.freemarker.FreeMarkerConfigurationFactoryBean">
		<properties>
			<item name="freemarkerSettings" type="properties">
				<value name="incompatible_improvements">2.3.23</value>
				<value name="template_exception_handler">rethrow</value>
				<value name="default_encoding">UTF-8</value>
				<value name="number_format">0.####</value>
			</item>
			<item name="trimDirectives" valueType="parameters">
				directive: {
					name: "trim"
				}
				directive: {
					name: "where"
					prefix: "WHERE "
					deprefixes: [
						"and"
						"or"
					]
				}
				directive: {
					name: "set"
					prefix: "SET "
					desuffixes: ","
				}
			</item>
		</properties>
	</bean>

	<bean id="freemarker" class="com.aspectran.core.context.template.engine.freemarker.FreeMarkerTemplateEngine">
		<constructor>
			<arguments>
				<item><reference bean="freemarkerConfigurationFactory"/></item>
			</arguments>
		</constructor>
	</bean>

	<bean id="pebbleConfigurationFactory" class="com.aspectran.core.context.template.engine.pebble.PebbleEngineFactoryBean"/>

	<bean id="pebble" class="com.aspectran.core.context.template.engine.pebble.PebbleTemplateEngine">
		<constructor>
			<arguments>
				<item><reference bean="pebbleConfigurationFactory"/></item>
			</arguments>
		</constructor>
	</bean>

	<translet name="echo">
		<description>
			두 개의 입력 값과 Aspectran 내장 템플릿 엔진을 사용해서 텍스트 형식으로 출력합니다.
		</description>
		<request>
			<parameters>
				<item name="input-1">${input-1:12345}</item>
				<item name="input-2">${input-2:67890}</item>
			</parameters>
		</request>
		<transform type="transform/text" contentType="text/plain">
			<template engine="token">
				Using Builtin Token Template Engine
				-------------------------------------
				input-1: ${input-1}
				input-2: ${input-2}
			</template>
		</transform>
	</translet>

	<translet name="free">
		<description>
			두 개의 입력 값과 Freemarker 템플릿 엔진을 사용해서 텍스트 형식으로 출력합니다.
		</description>
		<request>
			<parameters>
				<item name="input_1">${input_1:12345}</item>
				<item name="input_2">${input_2:67890}</item>
			</parameters>
		</request>
		<transform type="transform/text">
			<template engine="freemarker">
				Using Freemarker Template Engine
				-------------------------------------
				input_1: ${input_1}
				input_2: ${input_2}
			</template>
		</transform>
	</translet>

	<translet name="pebble">
		<description>
			두 개의 입력 값과 Pebble 템플릿 엔진을 사용해서 텍스트 형식으로 출력합니다.
		</description>
		<request>
			<attributes>
				<item name="input_1">${input_1:12345}</item>
				<item name="input_2">${input_2:67890}</item>
			</attributes>
		</request>
		<transform type="transform/text">
			<template engine="pebble">
				Using Pebble Template Engine
				-------------------------------------
				input_1: {{ input_1 }}
				input_2: {{ input_2 }}
			</template>
		</transform>
	</translet>

	<template id="sampleSql" engine="freemarker">
		<![CDATA[
		SELECT
			'${name}' as name,
			'${email}' as email
		FROM table1
		<@directive.where>
			<#if id?has_content>
			id = :id
			</#if>
			<#if name?has_content>
			AND name = :name
			</#if>
			<#if email?has_content>
			AND email = :email
			</#if>
		</@directive.where>
		ORDER BY name
		---------------------------------------------
		UPDATE table1
		<@directive.set>
			<#if name??>
			name = :name,
			</#if>
			<#if email??>
			email = :email,
			</#if>
			<#if id??>
			id = :id
			</#if>
		</@directive.set>
		]]>
	</template>

	<translet name="sql">
		<description>
			Freemarker 템플릿 엔진을 사용해서 간단한 SQL문을 생성하는 예제입니다.
		</description>
		<request>
			<attributes>
				<item name="name">${name:Jane}</item>
				<item name="email">${email:jane@mail.com}</item>
			</attributes>
		</request>
		<transform type="transform/text" template="sampleSql"/>
	</translet>

	<bean class="sample.SimplestAction">
		<description>
			Action Method를 가지고 있는 singleton 스코프를 가지는 Bean을 정의합니다.
		</description>
	</bean>

	<bean id="simplestAdvice" class="sample.SimplestAdvice">
		<description>
			Action Method 실행 전 후에 주입할 Advice Action Method를 가지고 있는
			singleton 스코프를 가지는 Bean을 정의합니다.
		</description>
	</bean>

	<aspect id="simplestAdviceAspect">
		<description>
			simplestAction Bean의 helloWorld 메쏘드를 실행하는 Translet이 발견되면,
			해당 Translet의 실행 전에는 simplestAdvice Bean의 welcome 메쏘드를 실행하고,
			해당 Translet의 실행 후에는 simplestAdvice Bean의 goodbye 메쏘드를 실행합니다.
		</description>
		<joinpoint type="translet">
			pointcut: {
                +: "hello@class:sample.SimplestAction^helloWorld"
            }
		</joinpoint>
		<advice bean="simplestAdvice">
			<before>
				<action method="welcome"/>
			</before>
			<after>
				<action method="goodbye"/>
			</after>
		</advice>
	</aspect>

	<translet name="hello">
		<description>
			simplestAction 빈에서 helloWorld 메쏘드를 실행합니다.
			helloWorld 메쏘드가 반환하는 "Hello, World." 문자열을 텍스트 형식의 컨텐츠로 응답합니다.
		</description>
		<transform type="transform/text">
			<action id="helloData" bean="class:sample.SimplestAction" method="helloWorld"/>
		</transform>
	</translet>

</aspectran>